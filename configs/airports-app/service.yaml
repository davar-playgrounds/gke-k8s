apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  labels:
    component: ${SERVICE_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        component: ${SERVICE_NAME}
        access-${SERVICE_NAME}-db: "1"
    spec:
      containers:
        - name: ${SERVICE_NAME}
          image: ${GCLOUD_HOSTNAME}/${GCLOUD_PROJECTNAME}/${SERVICE_NAME}:${SERVICE_VER}
          resources:
            limits:
              cpu: "${SERVICE_CPU_LIMIT}"
              memory: ${SERVICE_MEMORY_LIMIT}
            requests:
              cpu: "${SERVICE_CPU_REQUEST}"
              memory: ${SERVICE_MEMORY_REQUEST}
          ports:
            - containerPort: 8080
          env:
            - name: MONGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${SERVICE_NAME}-db-credentials
                  key: username
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SERVICE_NAME}-db-credentials
                  key: password
            - name: MONGO_COLLECTION
              valueFrom:
                secretKeyRef:
                  name: ${SERVICE_NAME}-db-credentials
                  key: collection
            - name: MONGO_DB
              valueFrom:
                secretKeyRef:
                  name: ${SERVICE_NAME}-db-credentials
                  key: database
            - name: MONGO_DOMAIN
              value: '${SERVICE_NAME}-db.${NAMESPACE}.svc.cluster.local'
            - name: MONGO_PORT
              value: '27017'
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /alive
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  ports:
    -  name: transport
       port: 80
       protocol: TCP
       targetPort: 8080
  selector:
    component: ${SERVICE_NAME}
  type: ClusterIP
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: access-${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  podSelector:
    matchLabels:
      component: ${SERVICE_NAME}
  ingress:
    - from:
        - podSelector:
            matchLabels:
              access-${SERVICE_NAME}: "1"
          namespaceSelector:
            matchLabels:
              name: '${NAMESPACE}'
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: autoscaler-${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${SERVICE_NAME}
  minReplicas: 1
  maxReplicas: 2
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 50
    - type: Pods
      pods:
        metricName: current_connections
        targetAverageValue: 3
